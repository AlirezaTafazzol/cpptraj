#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
CPPTRAJ Development Notes
\end_layout

\begin_layout Author
Daniel R.
 Roe
\end_layout

\begin_layout Date
2010-07-21
\end_layout

\begin_layout Abstract
CPPTRAJ is code intended to be a complement and perhaps eventually a replacement
 for PTRAJ, the MD trajectory analysis software that comes packaged with
 AmberTools.
 CPPTRAJ is a complete rewrite of the PTRAJ code in C++, the intent being
 to make the code leak-free and thread-safe.
 The biggest functional change from PTRAJ is the ability to load and process
 trajectories with different topology files at the same time.
 
\end_layout

\begin_layout Part
PtrajState Class
\end_layout

\begin_layout Standard
The PtrajState class is the main class in cpptraj.
 It contains all relevant data and controls the flow of the program.
 Data in cpptraj can be divided into 4 categories: trajectory files, actions,
 data sets, and parameter files.
 These are handled by TrajFileList, PtrajActionList, DataSetList, and ParmFileLi
st classes respectively.
 
\end_layout

\begin_layout Section
TrajFileList
\end_layout

\begin_layout Standard
Input trajectories, input reference structures/trajectories, and output
 trajectories are all handled by the TrajFileList class.
 
\end_layout

\begin_layout Section
PtrajActionList
\end_layout

\begin_layout Standard
An action is defined as an operation that will take place on specified frames
 of input trajectories.
 Actions are handled by the PtrajActionList class.
 
\end_layout

\begin_layout Part
File Handling
\end_layout

\begin_layout Section
File Types and File Formats
\end_layout

\begin_layout Standard
File handling is done by several classes.
 There are two levels in file handling: file types and file formats.
 The lowest-level is file type, which describes the functions that actually
 access the file.
 This is handled by the base class BaseFileIO.
 A class representing each file type should exist for every kind of file
 whose basic IO functions differ, e.g.
 FILE (stdio.h), gzFile (zlib.h), BZFILE (bzlib.h), MPI_File (mpi.h) and so
 on; these classes will inherit the BaseFileIO class.
 As NETCDF files are structured quite differently and are currently only
 used as trajectories, they are considered a format and not a unique file
 type.
\end_layout

\begin_layout Subsection
BaseFileIO Class
\end_layout

\begin_layout Standard
BaseFileIO will be contained inside the PtrajFile class, which will hold
 a pointer to BaseFileIO that will be assigned based on the file type, e.g.:
\end_layout

\begin_layout LyX-Code
BaseFileIO* IO = (gzipFile*) malloc(sizeof(gzipFile));
\end_layout

\begin_layout Standard
where gzipFile is a class that inherits BaseFileIO.
 PtrajFile will contain data common to all files, such as the file name,
 size, and so on.
 In order to generalize the functionality of BaseFileIO it will contain
 several virtual members that all inheriting file type classes will have
 equivalent functions for:
\end_layout

\begin_layout Description
virtual
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

Open(const
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

*filename,
\begin_inset space ~
\end_inset

const
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

*mode): Open the file with the specified mode.
\end_layout

\begin_layout Description
virtual
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

Close(): Closes the file.
\end_layout

\begin_layout Description
virtual
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

Read(void
\begin_inset space ~
\end_inset

*buffer,
\begin_inset space ~
\end_inset

size_t
\begin_inset space ~
\end_inset

size,
\begin_inset space ~
\end_inset

size_t
\begin_inset space ~
\end_inset

count): Read size*count bytes from a file into buffer.
\end_layout

\begin_layout Description
virtual
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

Write(void
\begin_inset space ~
\end_inset

*buffer,
\begin_inset space ~
\end_inset

size_t
\begin_inset space ~
\end_inset

size,
\begin_inset space ~
\end_inset

size_t
\begin_inset space ~
\end_inset

count): Write size*count bytes from buffer to a file.
\end_layout

\begin_layout Description
virtual
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

Seek(off_t
\begin_inset space ~
\end_inset

position,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

offset): Move the file pointer to a specific position in the stream.
\end_layout

\begin_layout Description
virtual
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

Rewind(): Reset the file pointer.
 In cases where rewind is not supported the file will be closed and reopened.
\end_layout

\begin_layout Description
virutal
\begin_inset space ~
\end_inset

off_t
\begin_inset space ~
\end_inset

Tell(): Return the position of the file pointer.
\end_layout

\begin_layout Description
virtual
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

Gets(char
\begin_inset space ~
\end_inset

*buffer,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

length): Read length bytes into buffer, up until newline, null, or EOF.
\end_layout

\begin_layout Description
void
\begin_inset space ~
\end_inset

Printf(const
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

*format,
\begin_inset space ~
\end_inset

...): Write a formatted string to a file.
 Not inherited: uses sprintf to write to a buffer, then the Write() function
 is used.
\end_layout

\begin_layout Standard
File formats are higher level and describe how the data accessed by a file
 type is organized.
 There are several file formats: Amber topology file, Amber Trajectory,
 Amber Restart, PDB file, etc.
 Most file formats can have any file type (with the afformentioned exception
 of Amber NETCDF trajectory).
 For example, an Amber Trajectory can be gzipped, or accessed using MPI
 file routines.
 The file format should not need to know anything about the file type.
 File formats will contain (and not inherit) file types, i.e.
 they will have a PtrajFile instance as part of their class.
\end_layout

\begin_layout Section
Trajectory Files
\end_layout

\begin_layout Standard
Trajectory files are a subset of file formats, and are given their own base
 class because all of the different trajectory types are processed in the
 same way; they are opened, frames are read, they are closed.
 
\end_layout

\end_body
\end_document
