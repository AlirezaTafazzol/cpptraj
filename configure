#!/bin/bash
# CPPTRAJ standalone configure script.
# Daniel R. Roe
# 2010-11-18
# Rewritten 2018-01-25 (getting old...)
# This script will determine compiler and linker flags based on
# desired user-specified options. Generates config.h, which is
# used by src/Makefile.

#-------------------------------------------------------------------------------
# Print simple help message
UsageSimple() {
  echo "Usage: ./configure <OPTIONS> [gnu | intel | pgi | clang | cray]"
  echo "  OPTIONS:"
  echo "    --help      : Display this message."
  echo "    -openmp     : Use openmp for parallelization of certain routines."
  echo "    -mpi        : Use mpicc/mpicxx to compile."
  echo "    -intelmpi   : Use mpiicc/mpiicpc to compile."
  echo "    -cray       : Use cray compiler wrappers (cc/CC/ftn)."
  echo "    -amberlib   : Use BLAS/ARPACK/LAPACK/NetCDF libraries from \$AMBERHOME"
  echo "    --full-help : Display additional options."
  echo ""
}

#-------------------------------------------------------------------------------
# Print more detailed options
UsageFull() {
  echo "  ADDITIONAL OPTIONS:"
  echo "    -debug     : Turn on compiler debugging info."
  echo "    -noopt     : Do not use optimized compiler flags."
  echo "    -d         : Turn on compiler debug info and disable optimization (i.e. -debug -noopt)."
  echo "    -timer     : Enable additional timing info."
  echo "    -debugon   : Add -DDEBUG flag to activate additional internal debugging."
  echo "    -nolfs     : Do not enable large file support."
  echo "    -shared    : Configure for generating libcpptraj (implies -nosanderlib)."
  echo "    -fftw3     : Use FFTW instead of pubfft for FFT."
  echo "    -windows   : Set up for use with MinGW compilers for a native Windows build"
  echo ""
  echo "  LIBRARY LINKING OPTIONS:"
  echo "    --with-netcdf=<DIR>"
  echo "    --with-pnetcdf=<DIR> (PNETCDF is needed for NetCDF parallel trajectory processing)"
  echo "    --with-zlib=<DIR>"
  echo "    --with-bzlib=<DIR>"
  echo "    --with-blas=<DIR>"
  echo "    --with-lapack=<DIR>"
  echo "    --with-arpack=<DIR>"
  echo "    --with-fftw3=<DIR>"
  echo "    --with-readline=<DIR>"
  echo "    --with-sanderlib=<DIR>"
  echo "    -static        : Use static linking."
  echo "    -libstatic     : Use static linking only for specified libraries."
  echo "    -openblas      : Use OpenBLAS (with LAPACK) instead of separate BLAS/LAPACK"
  echo "    -macAccelerate : Use Accelerate framework for BLAS/LAPACK"
  echo "    -libsci        : Use Cray LibSci for BLAS/LAPACK"
  echo "    -mkl           : Use Intel MKL for BLAS/LAPACK (requires MKL_HOME/MKLROOT set)."
  echo "    -nobzlib       : Do not use libbz2 (bzip2)"
  echo "    -nozlib        : Do not use zlib (gzip/zip)"
  echo "    -nonetcdf      : Do not use NetCDF"
  echo "    -nomathlib     : Do not include routines which require LAPACK or BLAS"
  echo "    -noarpack      : Do not include routines which require ARPACK"
  echo "    -noreadline    : Do not include support for readline in the interpreter"
  echo "    -nosanderlib   : Do not try to link to the sander API even if present"
  echo ""
  echo "  ENVIRONMENT VARIABLES (can also be passed to configure as <VAR>=<VALUE>):"
  echo "    CXX          : Name of the C++ compiler."
  echo "    CC           : Name of the C compiler."
  echo "    FC           : Name of the Fortran compiler."
  echo "    MPICXX       : Name of MPI C++ compiler."
  echo "    MPICC        : Name of MPI C compiler."
  echo "    MPIF90       : Name of MPI Fortran compiler."
  echo "    CXXFLAGS     : Flags to pass to the C++ compiler."
  echo "    CFLAGS       : Flags to pass to the C compiler."
  echo "    FFLAGS       : Flags to pass to the Fortran compiler."
  echo "    LDFLAGS      : Flags to pass to the linker."
  echo "    DBGFLAGS     : Any additional flags to pass to all compilers."
  echo "    SHADER_MODEL : (-cuda) Should be set to 'sm_XX', where XX is CUDA compute architecture."
  echo ""
  echo "  EXPERIMENTAL OPTIONS:"
  echo "    -profile         : Use Gnu compiler profiling (>= V4.5)*"
  echo "    -gprofile        : Use Gnu compiler GLIBC profiling (>= V4.5)*"
  echo "    -vtune           : Enable options for use with Intel Vtune"
  echo "    -single-ensemble : Enable support for reading/writing single ensemble trajectories."
  echo "    -cuda            : Enable support for CUDA. Requires SHADER_MODEL be set."
  echo ""
  echo "*NOTE: -profile and -gprofile are mutually exclusive."
  echo ""
}

#-------------------------------------------------------------------------------
# Script variables

#-------------------------------------------------------------------------------
# Print message to stderr and exit.
Err() {
  echo "Error: $*" > /dev/stderr
  exit 1
}

# ==============================================================================
# MAIN SCRIPT
# Process user options.

KEY=''
VALUE=''
while [ ! -z "$1" ] ; do
  VALUE=''
  # Check for '='
  #POS=`echo $1 | awk 'match($0,"="){print RSTART}'`
  POS=`expr index "$1" =`
  echo POS $POS
  if [ $POS -eq 1 ] ; then
    Err "'=' cannot be the first character in an argument ($1)"
  elif [ $POS -gt 1 ] ; then
    # Separate into KEY and VALUE
    ((PM1 = $POS - 1))
    KEY=${1:0:$PM1}
    VALUE=${1:$POS}
    if [ -z "$VALUE" ] ; then
      Err "'$1': Expected <var>=<value>, missing <value>."
    fi
    eval VALUE=$VALUE 2> /dev/null
  else
    KEY=$1
  fi
  echo "KEY='$KEY'  VALUE='$VALUE'" # DEBUG
  shift
done
