#!/bin/bash
# CPPTRAJ standalone configure script.
# Daniel R. Roe
# 2010-11-18
# Rewritten 2018-01-25 (getting old...)
# This script will determine compiler and linker flags based on
# desired user-specified options. Generates config.h, which is
# used by src/Makefile.

#-------------------------------------------------------------------------------
# Print simple help message
UsageSimple() {
  echo "Usage: ./configure <OPTIONS> [gnu | intel | pgi | clang | cray]"
  echo "  OPTIONS:"
  echo "    --help      : Display this message."
  echo "    -openmp     : Use openmp for parallelization of certain routines."
  echo "    -mpi        : Use mpicc/mpicxx to compile."
  echo "    -intelmpi   : Use mpiicc/mpiicpc to compile."
  echo "    -cray       : Use cray compiler wrappers (cc/CC/ftn)."
  echo "    -amberlib   : Use BLAS/ARPACK/LAPACK/NetCDF libraries from \$AMBERHOME"
  echo "    --full-help : Display additional options."
  echo ""
}

#-------------------------------------------------------------------------------
# Print more detailed options
UsageFull() {
  UsageSimple
  echo "  ADDITIONAL OPTIONS:"
  echo "    -debug     : Turn on compiler debugging info."
  echo "    -noopt     : Do not use optimized compiler flags."
  echo "    -d         : Turn on compiler debug info and disable optimization (i.e. -debug -noopt)."
  echo "    -timer     : Enable additional timing info."
  echo "    -debugon   : Add -DDEBUG flag to activate additional internal debugging."
  echo "    -nolfs     : Do not enable large file support."
  echo "    -shared    : Configure for generating libcpptraj (implies -nosanderlib)."
  echo "    -fftw3     : Use FFTW instead of pubfft for FFT."
  echo "    -windows   : Set up for use with MinGW compilers for a native Windows build"
  echo ""
  echo "  LIBRARY LINKING OPTIONS:"
  echo "    --with-netcdf=<DIR>"
  echo "    --with-pnetcdf=<DIR> (PNETCDF is needed for NetCDF parallel trajectory processing)"
  echo "    --with-zlib=<DIR>"
  echo "    --with-bzlib=<DIR>"
  echo "    --with-blas=<DIR>"
  echo "    --with-lapack=<DIR>"
  echo "    --with-arpack=<DIR>"
  echo "    --with-fftw3=<DIR>"
  echo "    --with-readline=<DIR>"
  echo "    --with-sanderlib=<DIR>"
  echo "    -static        : Use static linking."
  echo "    -libstatic     : Use static linking only for specified libraries."
  echo "    -openblas      : Use OpenBLAS (with LAPACK) instead of separate BLAS/LAPACK"
  echo "    -macAccelerate : Use Accelerate framework for BLAS/LAPACK"
  echo "    -libsci        : Use Cray LibSci for BLAS/LAPACK"
  echo "    -mkl           : Use Intel MKL for BLAS/LAPACK (requires MKL_HOME/MKLROOT set)."
  echo "    -nobzlib       : Do not use libbz2 (bzip2)"
  echo "    -nozlib        : Do not use zlib (gzip/zip)"
  echo "    -nonetcdf      : Do not use NetCDF"
  echo "    -nomathlib     : Do not include routines which require LAPACK or BLAS"
  echo "    -noarpack      : Do not include routines which require ARPACK"
  echo "    -noreadline    : Do not include support for readline in the interpreter"
  echo "    -nosanderlib   : Do not try to link to the sander API even if present"
  echo ""
  echo "  ENVIRONMENT VARIABLES (can also be passed to configure as <VAR>=<VALUE>):"
  echo "    CXX          : Name of the C++ compiler."
  echo "    CC           : Name of the C compiler."
  echo "    FC           : Name of the Fortran compiler."
  echo "    MPICXX       : Name of MPI C++ compiler."
  echo "    MPICC        : Name of MPI C compiler."
  echo "    MPIF90       : Name of MPI Fortran compiler."
  echo "    CXXFLAGS     : Flags to pass to the C++ compiler."
  echo "    CFLAGS       : Flags to pass to the C compiler."
  echo "    FFLAGS       : Flags to pass to the Fortran compiler."
  echo "    LDFLAGS      : Flags to pass to the linker."
  echo "    DBGFLAGS     : Any additional flags to pass to all compilers."
  echo "    SHADER_MODEL : (-cuda) Should be set to 'sm_XX', where XX is CUDA compute architecture."
  echo ""
  echo "  EXPERIMENTAL OPTIONS:"
  echo "    -profile         : Use Gnu compiler profiling (>= V4.5)*"
  echo "    -gprofile        : Use Gnu compiler GLIBC profiling (>= V4.5)*"
  echo "    -vtune           : Enable options for use with Intel Vtune"
  echo "    -single-ensemble : Enable support for reading/writing single ensemble trajectories."
  echo "    -cuda            : Enable support for CUDA. Requires SHADER_MODEL be set."
  echo ""
  echo "*NOTE: -profile and -gprofile are mutually exclusive."
  echo ""
}

# ----- Script variables -------------------------------------------------------
COMPILERS=''     # Use-specified compiler suite to use.
OPTFLAGS=''      # C/C++ compiler optimization flags
FOPTFLAGS=''     # Fortran compiler optimization flags
FREEFMTFLAG=''   # Fortran free format flag
FLINK=''         # Flag for linking in Fortran code
OMPFLAG=''       # Compiler OpenMP flag
PICFLAG=''       # Compiler flag for position-independent code
DEBUGFLAGS=''    # Compiler debug flags
C11FLAG=''       # Flag for compiling C++11 code
DIRECTIVES=''    # Common compiler directives
INCLUDE=''       # Library include line
REQUIRES_FLINK=0 # If 1 FLINK flag required during link phase

# ----- Configure options ------------------------
USE_MPI=0      # 0 = no MPI, 1 = mpicc etc, 2 = mpiicc etc
USE_OPENMP=0   # 0 = no OpenMP, 1 = OpenMP
USE_CUDA=0     # 0 = no CUDA, 1 = CUDA
USE_CRAY=0     # 1 = Compiling on a cray machine. 
USE_OPT=1      # 0 = no optimization, 1 = use compiler optimizations.
USE_BLAS=1     # 0 = no BLAS/LAPACK, 1 = system/specified, 2 = MKL, 3 = OpenBLAS, 4 = macAccelerate, 5 = LibSci
USE_DEBUG=0    # 0 = no debug info, 1 = enable compiler debug info
USE_STATIC=0   # 0 = no static linking, 1 = static linking, 2 = static link for specified libraries
USE_SHARED=0   # 1 = Use flag for position-independent code (required for libcpptraj)
USE_AMBERLIB=0 # 1 = Use NetCDF/BLAS/LAPACK/ARPACK libraries from AMBERHOME
USE_FFTW3=0    # 0 = Use internal FFT, 1 = use FFTW3
USE_WINDOWS=0  # 1 = Compiling on windows
USE_PROFILE=0  # 0 = no profiling, 1 = C++ profiling, 2 = GLIBC profiling, 3 = Intel Vtune

USE_SINGLEENSEMBLE=0 # Enable support for single ensemble trajectories
USE_CPPTRAJDEBUG=0   # Enable internal cpptraj debug flags
USE_TIMER=0          # Enable detailed internal timings.
C11_SUPPORT='yes'    # Support C++11 code

CLEAN=1        # 0 = clean after configure, 1 = do not
SKIP_CHECKS=0  # 0 = Check compilers/libraries, 1 = do not

# Flags for large file support
LFS='-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64'

# Install locations
CPPTRAJHOME=''
CPPTRAJBIN=''
CPPTRAJLIB=''

# ----- External Libraries -----------------------
# Total number of external libraries
NLIB=11
# Library indices
# Original: FFT ARPACK LAPACK BLAS NETCDF PARANC BZIP ZIP READLINE XDRFILE
LNETCDF=0
LPARANC=1    # Parallel NetCDF
LZIP=2
LBZIP=3
LBLAS=4
LLAPACK=5
LARPACK=6
LFFTW3=7
LREADLINE=8
LXDRFILE=9
LSANDER=10

# Library status:
#   off       : Do not use library.
#   enabled   : Try to use library.
#   specified : Library location has been specified.
#   amberopt  : Use library from AMBERHOME - optional.
#   bundled   : Use bundled version of library.
LIB_STAT[$LNETCDF]='enabled'         # off, enabled, specified, amberopt, bundled
LIB_CKEY[$LNETCDF]='netcdf'          # Command-line key for '--with-' and '-no'
LIB_HOME[$LNETCDF]=''                # Library home directory (-L<home>)
LIB_FLAG[$LNETCDF]='-lnetcdf'        # Library linker flag
LIB_STTC[$LNETCDF]='libnetcdf.a'     # Expected static location relative to home
LIB_D_ON[$LNETCDF]='-DBINTRAJ'       # Directive if library on
LIB_DOFF[$LNETCDF]=''                # Directive if library off

LIB_STAT[$LPARANC]='off'
LIB_CKEY[$LPARANC]='pnetcdf'
LIB_HOME[$LPARANC]=''
LIB_FLAG[$LPARANC]='-lpnetcdf'
LIB_STTC[$LPARANC]='libpnetcdf.a'
LIB_D_ON[$LPARANC]='-DHAS_PNETCDF'
LIB_DOFF[$LPARANC]=''

LIB_STAT[$LBZIP]='enabled'
LIB_CKEY[$LBZIP]='bzlib'
LIB_HOME[$LBZIP]=''
LIB_FLAG[$LBZIP]='-lbz2'
LIB_STTC[$LBZIP]='libbz2.a'
LIB_D_ON[$LBZIP]='-DHASBZ2'
LIB_DOFF[$LBZIP]=''

LIB_STAT[$LZIP]='enabled'
LIB_CKEY[$LZIP]='zlib'
LIB_HOME[$LZIP]=''
LIB_FLAG[$LZIP]='-lz'
LIB_STTC[$LZIP]='libz.a'
LIB_D_ON[$LZIP]='-DHASGZ'
LIB_DOFF[$LZIP]=''

LIB_STAT[$LBLAS]='enabled'
LIB_CKEY[$LBLAS]='blas'
LIB_HOME[$LBLAS]=''
LIB_FLAG[$LBLAS]='-lblas'
LIB_STTC[$LBLAS]='libblas.a'
LIB_D_ON[$LBLAS]=''
LIB_DOFF[$LBLAS]='-DNO_MATHLIB'

LIB_STAT[$LLAPACK]='enabled'
LIB_CKEY[$LLAPACK]='lapack'
LIB_HOME[$LLAPACK]=''
LIB_FLAG[$LLAPACK]='-llapack'
LIB_STTC[$LLAPACK]='liblapack.a'
LIB_D_ON[$LLAPACK]=''
LIB_DOFF[$LLAPACK]=''

LIB_STAT[$LARPACK]='enabled'
LIB_CKEY[$LARPACK]='arpack'
LIB_HOME[$LARPACK]=''
LIB_FLAG[$LARPACK]='-larpack'
LIB_STTC[$LARPACK]='libarpack.a'
LIB_D_ON[$LARPACK]=''
LIB_DOFF[$LARPACK]='-DNO_ARPACK'

LIB_STAT[$LFFTW3]='off'
LIB_CKEY[$LFFTW3]='fftw3'
LIB_HOME[$LFFTW3]=''
LIB_FLAG[$LFFTW3]='-lfftw3'
LIB_STTC[$LFFTW3]='libfftw3.a'
LIB_D_ON[$LFFTW3]='-DFFTW_FFT'
LIB_DOFF[$LFFTW3]=''

LIB_STAT[$LREADLINE]='bundled'
LIB_CKEY[$LREADLINE]='readline'
LIB_HOME[$LREADLINE]='readline'
LIB_FLAG[$LREADLINE]='-lreadline'
LIB_STTC[$LREADLINE]='libreadline.a'
LIB_D_ON[$LREADLINE]=''
LIB_DOFF[$LREADLINE]='-DNO_READLINE'

LIB_STAT[$LXDRFILE]='bundled'
LIB_CKEY[$LXDRFILE]='xdrfile'
LIB_HOME[$LXDRFILE]='xdrfile'
LIB_FLAG[$LXDRFILE]='-lxdrfile'
LIB_STTC[$LXDRFILE]='libxdrfile.a'
LIB_D_ON[$LXDRFILE]=''
LIB_DOFF[$LXDRFILE]='-DNO_XDRFILE'

LIB_STAT[$LSANDER]='amberopt'
LIB_CKEY[$LSANDER]='sanderlib'
LIB_HOME[$LSANDER]=''
LIB_FLAG[$LSANDER]='-lsander'
LIB_STTC[$LSANDER]='libsander.a'
LIB_D_ON[$LSANDER]='-DUSE_SANDERLIB'
LIB_DOFF[$LSANDER]=''

#-------------------------------------------------------------------------------
# Print message to stderr and exit.
Err() {
  echo "Error: $*" > /dev/stderr
  exit 1
}

#-------------------------------------------------------------------------------
# Check for '--with' and '-no' library keys.
CheckLibraryKeys() {
  for ((i=0; i < $NLIB; i++)) ; do
    LKEY="--with-"${LIB_CKEY[$i]}
    if [ "$1" = "$LKEY" ] ; then
      LIB_HOME[$i]=$2
      LIB_STAT[$i]='specified'
      echo "${LIB_CKEY[$i]} enabled."
      return 0
    fi
    LKEY="-no"${LIB_CKEY[$i]}
    if [ "$1" = "$LKEY" ] ; then
      LIB_STAT[$i]='off'
      echo "${LIB_CKEY[$i]} disabled."
      return 0
    fi
  done
  return 1
}

#-------------------------------------------------------------------------------
# Test compile and run a program.
# ARGS: [silent|quiet] <description> <compiler> <args> <file> [<link>]
TestProgram() {
  if [ "$1" = 'quiet' ] ; then
    silent=2
    shift
  elif [ "$1" = 'silent' ] ; then
    silent=1
    shift
  else
    silent=0
  fi
  desc="$1"
  comp="$2"
  args="$3"
  file="$4"
  link="$5"
  if [ $silent -ne 2 ] ; then echo -n "$desc: " ; fi
  COMPILELINE="$comp $args -o testp $file $link"
  echo $COMPILELINE #DEBUG
  $COMPILELINE > /dev/null 2> compile.err
  if [ $? -ne 0 ] ; then
    if [ $silent -eq 0 ] ; then
      echo ""
      echo "Compile failed: $COMPILELINE" > /dev/stderr
      echo "Error follows:" > /dev/stderr
      cat compile.err > /dev/stderr
      exit 1
    else
      rm compile.err
      return 1
    fi
  fi
  ./testp > /dev/null
  if [ $? -ne 0 ] ; then
    echo ""
    echo "Program failed, compiled with: $COMPILELINE" > /dev/stderr
    exit 1
  fi
  echo "OK"
  rm -f $file testp compile.err
  return 0
}

# ===== LIBRARY TESTS ==========================================================
TestBzlib() {
  cat > testp.cpp <<EOF
#include <cstdio>
#include "bzlib.h"
int main() { BZFILE *bfile; bfile=NULL; printf("Testing\n"); return 0; }
EOF
  TestProgram "  Checking BZLIB" "$CXX" "$CXXFLAGS ${LIB_INCL[$LBZIP]}" testp.cpp "${LIB_FLAG[$LBZIP]}"
}

TestZlib() {
  cat > testp.cpp <<EOF
#include <cstdio>
#include "zlib.h"
int main() { gzFile gfile; gfile=NULL; printf("Testing\n"); return 0; }
EOF
  TestProgram "  Checking ZLIB" "$CXX" "$CXXFLAGS ${LIB_INCL[$LZIP]}" testp.cpp "${LIB_FLAG[$LZIP]}"
}

TestNetcdf() {
  cat > testp.cpp <<EOF
#include <cstdio>
#include "netcdf.h"
void unused() {int ncid; nc_open("foo.nc", 0, &ncid);}
int main() { printf("Testing\n"); printf("%s\n",nc_strerror(0)); return 0; }
EOF
  TestProgram "  Checking NetCDF" "$CXX" "$CXXFLAGS ${LIB_INCL[$LNETCDF]}" testp.cpp "${LIB_FLAG[$LNETCDF]}"
}

TestPnetcdf() {
  cat > testp.cpp <<EOF
#include <cstdio>
#include <pnetcdf.h>
void unused() {int ncid; ncmpi_open(MPI_COMM_WORLD, "foo.nc", NC_NOWRITE, MPI_INFO_NULL, &ncid);}
int main() { printf("Testing\n"); printf("%s\n",ncmpi_strerror(0)); return 0; }
EOF
  TestProgram "  Checking Parallel NetCDF" "$CXX" "$CXXFLAGS ${LIB_INCL[$LPARANC]}" testp.cpp "${LIB_FLAG[$LPARANC]}"
}

DetermineFlink() {
  desc="$1"
  flibs="$2"
  if [ $REQUIRES_FLINK -eq 0 ] ; then
    # Try without FLINK
    TestProgram silent "$desc" "$CXX" "$CXXFLAGS" testp.cpp "$flibs"
    if [ $? -eq 1 ] ; then
      # That failed. Try with FLINK
      TestProgram "$desc (Fortran)" "$CXX" "$CXXFLAGS" testp.cpp "$flibs $FLINK"
      REQUIRES_FLINK=1
    fi
  else
    # Try with FLINK
    TestProgram "$desc (Fortran)" "$CXX" "$CXXFLAGS" testp.cpp "$flibs $FLINK"
  fi
}
    
TestMathlib() {
  cat > testp.cpp <<EOF
#include <cstdio>
extern "C" {
  void dsyev_(char*, char*, int&, double*, int&, double*,double*,int&,int&);
  void dgemm_(char*, char*, int&, int&, int&, double&,
              double*, int&, double*, int&, double&, double*, int&);
}
int main() {
  int n_cols = 3, lwork = 102, info;
  double work[102], mat[9], vec[3], alpha = 1.0;
  mat[0] = 1.0; mat[1] = 1.0; mat[2] = 1.0;
  mat[3] = 1.0; mat[4] = 1.0; mat[5] = 1.0;
  mat[6] = 1.0; mat[7] = 1.0; mat[8] = 1.0;
  dsyev_((char*)"V", (char*)"U", n_cols, mat, n_cols, vec, work, lwork, info);
  dgemm_((char*)"N",(char*)"N", n_cols, n_cols, n_cols, alpha,
         mat, n_cols, mat, n_cols, alpha, mat, n_cols);
  printf("Testing\n"); return 0;
}
EOF
  DetermineFlink "  Checking LAPACK/BLAS" "${LIB_FLAG[$LLAPACK]} ${LIB_FLAG[$LBLAS]}"
}

TestArpack() {
  cat > testp.cpp <<EOF
#include <cstdio>
extern "C" {
  void dsaupd_(int&, char&, int&, char*, int&, double&, double*,
               int&, double*, int&, int*, int*, double*, double*,
               int&, int&);
}
int main() {
  int ival = 0;
  double dval = 0.0;
  char cval = 'I';
  dsaupd_(ival, cval, ival, &cval, ival, dval, &dval,
          ival, &dval, ival, &ival, &ival, &dval, &dval,
          ival, ival);
  printf("Testing\n"); return 0;
}
EOF
  DetermineFlink "  Checking ARPACK" "${LIB_FLAG[$LARPACK]} ${LIB_FLAG[$LLAPACK]} ${LIB_FLAG[$LBLAS]}"
}

TestFFTW3() {
  cat > testp.cpp <<EOF
#include <cstdio>
#include <fftw3.h>
int main() {
  fftw_complex* array = (fftw_complex*) fftw_malloc(sizeof(fftw_complex) * 32);
  if (array == 0) return 1;
  fftw_free(array);
  printf("Testing\n"); return 0;
}
EOF
  TestProgram "  Checking FFTW3" "$CXX" "$CXXFLAGS ${LIB_INCL[$LFFTW3]}" testp.cpp "${LIB_FLAG[$LFFTW3]}" 
}

TestReadline() {
  cat > testp.cpp <<EOF
#include <cstdio>
#include <readline.h>
static char *line_read = (char *)NULL;
// Do not want to actually run this so leave outside main
void Unused() { line_read = readline(""); }
int main() { return 0; }
EOF
  TestProgram "  Checking Readline" "$CXX" "$CXXFLAGS ${LIB_INCL[$LREADLINE]}" testp.cpp "${LIB_FLAG[$LREADLINE]}"
}

TestXdrfile() {
  cat > testp.cpp <<EOF
#include <xdrfile_xtc.h>
bool Unused(const char* fname, int& natoms) {
  if ( read_xtc_natoms( (char*)fname, &natoms ) != exdrOK )
    return false;
  return true;
}
int main() { return 0; }
EOF
  TestProgram "  Checking Xdrfile" "$CXX" "$CXXFLAGS ${LIB_INCL[$LXDRFILE]}" testp.cpp "${LIB_FLAG[$LXDRFILE]}"
}

TestSanderlib() {
  cat > testp.cpp <<EOF
#include "sander.h"
int main() {
  sander_input input_;
  input_.extdiel = 78.5; input_.intdiel = 1.0;  input_.rgbmax = 25.0;
  input_.saltcon = 0.0;  input_.cut = 8.0;      input_.dielc = 1.0;
  input_.rdt = 0.0;      input_.fswitch = -1.0; input_.restraint_wt = 0.0;

  input_.igb = 0; input_.alpb = 0;  input_.gbsa = 0;    input_.lj1264 = -1;
  input_.ipb = 0; input_.inp = 2;   input_.vdwmeth = 1; input_.ew_type = 0;
  input_.ntb = 0; input_.ifqnt = 0; input_.jfastw = 0;  input_.ntf = 2;
  input_.ntc = 2; input_.ntr = 0;   input_.ibelly = 0;

  input_.restraintmask[0] = '\0'; input_.bellymask[0] = '\0'; input_.refc[0] = '\0';
  if (is_setup()) sander_cleanup();
  return 0;
}
EOF
  if [ "${LIB_STAT[$LSANDER]}" = 'amberopt' ] ; then
    TestProgram silent "  Checking for sanderlib" "$CXX" "$CXXFLAGS ${LIB_INCL[$LSANDER]}" testp.cpp "${LIB_FLAG[$LSANDER]}"
    if [ $? -eq 1 ] ; then
      echo "Warning: SANDER test failed. CPPTRAJ will be built without the SANDER API."
      LIB_STAT[$LSANDER]='off'
    fi
  else
    TestProgram "  Checking sanderlib" "$CXX" "$CXXFLAGS ${LIB_INCL[$LSANDER]}" testp.cpp "${LIB_FLAG[$LSANDER]}"
  fi
}

#-------------------------------------------------------------------------------
# Test external libraries
TestLibraries() {
  if [ "${LIB_TEST[$LBZIP]}" = 'yes'     ] ; then TestBzlib ; fi
  if [ "${LIB_TEST[$LZIP]}" = 'yes'      ] ; then TestZlib ; fi
  if [ "${LIB_TEST[$LNETCDF]}" = 'yes'   ] ; then TestNetcdf ; fi
  if [ "${LIB_TEST[$LPARANC]}" = 'yes'   ] ; then TestPnetcdf ; fi
  if [ "${LIB_TEST[$LBLAS]}" = 'yes'     ] ; then TestMathlib ; fi
  if [ "${LIB_TEST[$LARPACK]}" = 'yes'   ] ; then TestArpack ; fi
  if [ "${LIB_TEST[$LFFTW3]}" = 'yes'    ] ; then TestFFTW3 ; fi
  if [ "${LIB_TEST[$LREADLINE]}" = 'yes' ] ; then TestReadline ; fi
  if [ "${LIB_TEST[$LXDRFILE]}" = 'yes'  ] ; then TestXdrfile ; fi
  if [ "${LIB_TEST[$LSANDER]}" = 'yes'   ] ; then TestSanderlib ; fi
}

#-------------------------------------------------------------------------------
# Setup include and linker flags for external libraries
SetupLibraries() {
  # For any 'amberopt' check that AMBERHOME is available.
  for ((i=0; i < $NLIB; i++)) ; do
    if [ "${LIB_STAT[$i]}" = 'amberopt' ] ; then
      if [ -z "$AMBERHOME" ] ; then
        echo "Warning: Compilation of ${LIB_CKEY[$i]} requires AMBERHOME to be set"
        echo "         if --with-${LIB_CKEY[$i]} not specified."
        LIB_STAT[$i]='off'
      else
        LIB_HOME[$i]=$AMBERHOME
      fi
    fi
  done
  # Set up library paths
  for ((i=0; i < $NLIB; i++)) ; do
    lhome=''
    linc=''
    lflag=''
    if [ "${LIB_STAT[$i]}" = 'off' ] ; then
      echo "${LIB_CKEY[$i]} disabled."
      if [ ! -z "${LIB_DOFF[$i]}" ] ; then
        DIRECTIVES="$DIRECTIVES ${LIB_DOFF[$i]}"
      fi
      LIB_TEST[$i]='no'
    else
      echo "${LIB_CKEY[$i]} enabled."
      if [ ! -z "${LIB_D_ON[$i]}" ] ; then
        DIRECTIVES="$DIRECTIVES ${LIB_D_ON[$i]}"
      fi
      # Static/dynamic linking
      lhome=${LIB_HOME[$i]}
      if [ "${LIB_STAT[$i]}" = 'bundled' ] ; then
        LIB_TEST[$i]='no'
        linc=$lhome
        lflag="$lhome/${LIB_STTC[$i]}"
      else
        LIB_TEST[$i]='yes'
        if [ -z "$lhome" ] ; then
          if [ "${LIB_STAT[$i]}" = 'specified' -a $USE_STATIC -eq 2 ] ; then
            Err "'-libstatic' requires --with-${LIB_CKEY[$i]} specified."
          fi
          lflag=${LIB_FLAG[$i]}
        else
          linc="-I$lhome/include"
          if [ "${LIB_STAT[$i]}" = 'specified' -a $USE_STATIC -eq 2 ] ; then
            lflag="$lhome/lib/${LIB_STTC[$i]}"
            if [ -z "$lflag" ] ; then
              Err "Static library for ${LIB_CKEY[$i]} is not known."
            fi
          else
            lflag="-L$lhome/lib ${LIB_FLAG[$i]}"
          fi
          # Library-specific INCLUDE fixes
          if [ $i -eq $LREADLINE ] ; then
            linc="$linc/readline"
          fi
          if [ $i -eq $LXDRFILE ] ; then
            linc="$linc/xdrfile"
          fi
        fi
        # Library-specific flag fixes
        if [ $i -eq $LREADLINE ] ; then
          # For external readline, we need to link libtermcap for windows
          # and libncurses for Linux
          #if [ $USE_WINDOWS -eq 1 ]; then
            lflag="$lflag -ltermcap"
          #else
          #  lflag="$lflag -lncurses"
          #fi
        fi
      fi
      echo "linc $linc lflag $lflag" # DEBUG
      LIB_FLAG[$i]="$lflag"
      LIB_INCL[$i]="$linc"
    fi
  done
}

#-------------------------------------------------------------------------------
# Set up compiler commands and compiler options
SetupCompilers() {
  if [ ! -z "$CXX" ] ; then echo "C++ compiler (CXX) set to $CXX" ; fi
  if [ ! -z "$CC"  ] ; then echo "C compiler (CC) set to $CC" ; fi
  if [ ! -z "$FC"  ] ; then echo "Fortran compiler (FC) set to $FC" ; fi
  # If no compiler type specified try to guess
  if [ -z "$COMPILERS" ] ; then
    if [ ! -z "$CXX" ] ; then
      echo "Determining compilers from CXX ($CXX)"
      COMPILERS='gnu'
      case "$CXX" in
        *g++*     ) COMPILERS='gnu' ;;
        *clang++* ) COMPILERS='clang' ;;
        *icpc*    ) COMPILERS='intel' ;;
        *pgc++*   ) COMPILERS='pgi' ;;
        *CC*      ) COMPILERS='cray' ;;
        * ) echo "Warning: Could not detect compiler type ($CXX); assuming GNU" > /dev/stderr;;
      esac
    else
      COMPILERS='gnu'
      echo "No compilers specified; defaulting to GNU."
    fi
  fi
  # Set compiler options
  warnflag='-Wall'
  dflag='-g'
  noinlineflag='-fno-inline'
  commonflags=''
  case "$COMPILERS" in
    'gnu' )
      if [ -z "$CC" ]; then CC=gcc; fi
      if [ -z "$CXX" ]; then CXX=g++; fi
      if [ -z "$FC" ]; then FC=gfortran; fi
      OPTFLAGS='-O3'
      OMPFLAG='-fopenmp'
      FREEFMTFLAG='-ffree-form'
      FOPTFLAGS='-O3'
      FLINK='-lgfortran'
      PICFLAG='-fPIC'
      C11FLAG='-std=gnu++11'
      ;;
   'clang' )
      if [ -z "$CC" ]; then CC=clang; fi
      if [ -z "$CXX" ]; then CXX=clang++; fi
      if [ -z "$FC" ]; then FC=gfortran; fi
      OPTFLAGS='-O3'
      OMPFLAG='-fopenmp'
      FREEFMTFLAG='-ffree-form'
      FOPTFLAGS='-O3'
      FLINK='-lgfortran'
      PICFLAG='-fPIC'
      ;;
    'intel' )
      if [ -z "$CC" ]; then CC=icc; fi
      if [ -z "$CXX" ]; then CXX=icpc; fi
      if [ -z "$FC" ]; then FC=ifort; fi
      CXXFLAGS="-fp-model precise -fp-model source $CXXFLAGS"
      CFLAGS="-fp-model precise -fp-model source $CFLAGS"
      OPTFLAGS='-O3'
      MAJOR_V=`$CXX -v 2>&1 | awk '{print $3}' | cut -d'.' -f1`
      if [ $MAJOR_V -ge 16 ] ; then
        OMPFLAG='-qopenmp'
      else
        OMPFLAG='-openmp'
      fi
      FREEFMTFLAG='-FR'
      FOPTFLAGS='-ip -O3'
      FLINK='-lifport -lifcore'
      PICFLAG="-fpic"
      ;;
    "pgi" )
      if [ -z "$CC" ]; then CC=pgcc; fi
      if [ -z "$CXX" ]; then CXX=pgc++; fi
      if [ -z "$FC" ]; then FC=pgf90; fi
      OPTFLAGS='-fast'
      FOPTFLAGS='-fast'
      if [ $USE_CRAY -eq 1 ] ; then
        OMPFLAG='-mp=nonuma'
      else
        OMPFLAG='-mp'
      fi
      noinlineflag='-Mnoautoinline'
      warnflag='-Minform=warn'
      FREEFMTFLAG='-Mfree'
      FLINK='-pgf90libs'
      PICFLAG='-fpic'
      C11FLAG='-std=c++11'
      ;;
    "cray" )
      if [ -z "$CC" ]; then CC=cc; fi
      if [ -z "$CXX" ]; then CXX=CC; fi
      if [ -z "$FC" ]; then FC=ftn; fi
      CXXFLAGS="-h gnu $CXXFLAGS"
      CFLAGS="-h gnu $CFLAGS"
      OPTFLAGS=''
      OMPFLAG=''
      FREEFMTFLAG='-f free -emf'
      FOPTFLAGS=''
      FLINK=''
      PICFLAG='-fpic'
      if [ $USE_OPENMP -eq 0 ] ; then
        commonflags='-h noomp'
      fi
      ;;
    * ) echo "Error: Unknown compilers: $1" > /dev/stderr ; exit 1 ;;
  esac
  # Change to MPI compiler wrappers if specified
  if [ $USE_MPI -ne 0 ] ; then
    if [ $USE_MPI -eq 1 ] ; then
      mpi_cc='mpicc'
      mpi_cxx='mpicxx'
      mpi_f90='mpif90'
    elif [ $USE_MPI -eq 2 ] ; then
      mpi_cc='mpiicc'
      mpi_cxx='mpiicpc'
      mpi_f90='mpiifort'
    fi
    if [ -z "$MPICC" ] ; then
      CC=$mpi_cc
    else
      echo "MPI C compiler (MPICC) set to $MPICC"
      CC=$MPICC
    fi
    if [ -z "$MPICXX" ] ; then
      CXX=$mpi_cxx
    else
      echo "MPI C++ compiler (MPICXX) set to $MPICXX"
      CXX=$MPICXX
    fi
    if [ -z "$MPIF90" ] ; then
      FC=$mpi_f90
    else
      echo "MPI Fortran compiler (MPIF90) set to $MPIF90"
      FC=$MPIF90
    fi
  fi
  # Use cray wrappers
  if [ $USE_CRAY -eq 1 ] ; then
    CC=cc
    CXX=CC
    FC=ftn
  fi
  # Sanity check
  if [ -z "$CC" -o -z "$CXX" -o -z "$FC" ] ; then
    echo "Error: No compiler specified and CXX not set." > /dev/stderr
    UsageSimple
    exit 1
  fi
  # Turn off optimizations if necessary
  if [ $USE_OPT -eq 0 ] ; then
    OPTFLAGS='-O0'
    FOPTFLAGS='-O0'
  fi
  # Turn off PI code if necessary
  if [ $USE_SHARED -eq 0 ] ; then
    PICFLAG=''
  fi
  # Turn off debug flags if necessary
  if [ $USE_DEBUG -eq 0 ] ; then
    dflag=''
    noinlineflag=''
  fi
  # Set compiler flags
  CXXFLAGS="$dflag $warnflag $OPTFLAGS $noinlineflag $PICFLAG $commonflags $CXXFLAGS"
  CFLAGS="$dflag $warnflag $OPTFLAGS $PICFLAG $commonflags $CFLAGS"
  FFLAGS="$dflag $warnflag $FOPTFLAGS $PICFLAG $FREEFMTFLAG $commonflags $FFLAGS"
  echo $CXX $CXXFLAGS
  echo $CC $CFLAGS
  echo $FC $FFLAGS
}

#-------------------------------------------------------------------------------
# Set up profiling if specified
SetupProfiling() {
  if [ $USE_PROFILE -ne 0 ] ; then
    if [ $USE_PROFILE -eq 1 -o $USE_PROFILE -eq 2 ] ; then
      if [ "$COMPILERS" != 'gnu' ] ; then
        Err "This profile option only supported by GNU compilers."
      fi
      if [ $USE_PROFILE -eq 1 ] ; then
        CXXFLAGS="-pg $CXXFLAGS"
        CFLAGS="-pg $CXXFLAGS"
        LDFLAGS="-pg $LDFLAGS"
      else
        CXXFLAGS="$CXXFLAGS -D_GLIBCXX_PROFILE"
      fi
    elif [ $USE_PROFILE -eq 3 ] ; then
      vtuneflags=''
      if [ "$COMPILERS" = 'intel' ] ; then
        vtuneflags='-debug inline-debug-info'
        CFLAGS="-g $vtuneflags $CFLAGS"
        CXXFLAGS="-g $vtuneflags $CXXFLAGS"
      fi
      LDFLAGS="-shared-intel -shared-libgcc $LDFLAGS"
    fi
  fi
}

#-------------------------------------------------------------------------------
# Basic compiler tests
TestCompilers() {
  echo "$COMPILERS compilers in use."
  # C++
  cat > testp.cpp <<EOF
#include <cstdio>
int main() { printf("Testing\n"); return 0; }
EOF
  TestProgram "  Testing C++ compiler" "$CXX" "$CXXFLAGS" testp.cpp
  # C
  cat > testp.c <<EOF
#include <stdio.h>
int main() { printf("Testing\n"); return 0; }
EOF
  TestProgram "  Testing C compiler" "$CC" "$CFLAGS" testp.c
  # Fortran - only needed if pub_fft.F90 needs to be compiled
  if [ $USE_FFTW3 -eq 0 ] ; then
    cat > testp.f <<EOF
      program testf
      write(6,*) 'testing a Fortran program'
      end program testf
EOF
    TestProgram "  Testing Fortran compiler" "$FC" "$FFLAGS" testp.f
  fi
  # OpenMP
  if [ $USE_OPENMP -eq 1 ] ; then
    cat > testp.cpp <<EOF
#ifdef _OPENMP
#include <omp.h>
#include <cstdio>
int main() {
  int nthreads;
# pragma omp parallel
  {
  if (omp_get_thread_num() == 0)
    nthreads = omp_get_num_threads();
  }
  printf("%i threads Testing\n", nthreads);
  return 0;
}
#endif
EOF
    TestProgram "  Testing OpenMP" "$CXX" "$CXXFLAGS $OMPFLAG" testp.cpp
  fi
  # C11 support
  cat > testp.cpp <<EOF
#if __cplusplus < 201103L
#error This file requires compiler and library support for the \
ISO C++ 2011 standard. This support is currently experimental, and must be \
enabled with the -std=c++11 or -std=gnu++11 compiler options.
#endif
#include <cstdio>
int main() { printf("Testing\n"); return 0; }
EOF
  TestProgram silent "  Testing C++11 support" "$CXX" "$CXXFLAGS $C11FLAG" testp.cpp
  if [ $? -eq 1 ] ; then
    echo "Not present"
    C11_SUPPORT='no'
  else
    C11_SUPPORT='yes'
  fi
  # Some compilers (like older Intel) have a problem with the order of
  # stdio vs mpi
  if [ $USE_MPI -ne 0 ] ; then
    cat > testp.cpp <<EOF
#include <cstdio>
#include <mpi.h>
int main() { printf("Testing a C++ MPI program.\n"); return 0; }
EOF
    TestProgram quiet "  Testing STDIO/MPI ordering" "$CXX" "$CXXFLAGS" testp.cpp
    if [ $? -eq 1 ] ; then
      # Try to fix it with -DMPICH_IGNORE_CXX_SEEK
      TestProgram "  Testing fix for STDIO/MPI ordering" "$CXX" "$CXXFLAGS -DMPICH_IGNORE_CXX_SEEK" testp.cpp
      # That worked. Add to CXXFLAGS
      CXXFLAGS="$CXXFLAGS -DMPICH_IGNORE_CXX_SEEK"
    fi
  fi
}

# ==============================================================================
# MAIN SCRIPT

# Check requirements
if [ -z "`which awk`" ] ; then
  Err "CPPTRAJ configure requires 'awk'."
fi

# Process user options.
KEY=''
VALUE=''
while [ ! -z "$1" ] ; do
  VALUE=''
  # Check for '='
  #POS=`expr index "$1" =` # NOT PORTABLE
  POS=`echo $1 | awk 'match($0,"="){print RSTART}'`
  if [ -z "$POS" ] ; then POS=0 ; fi
  if [ $POS -eq 1 ] ; then
    Err "'=' cannot be the first character in an argument ($1)"
  elif [ $POS -gt 1 ] ; then
    # Separate into KEY and VALUE
    ((PM1 = $POS - 1))
    KEY=${1:0:$PM1}
    VALUE=${1:$POS}
    if [ -z "$VALUE" ] ; then
      Err "'$1': Expected <var>=<value>, missing <value>."
    fi
    eval VALUE=$VALUE 2> /dev/null
  else
    KEY=$1
  fi
  echo "KEY='$KEY'  VALUE='$VALUE'" # DEBUG
  # Process KEY
  case "$KEY" in
    '--help' | '-h' ) UsageSimple ; exit 0 ;;
    '--full-help'   ) UsageFull   ; exit 0 ;;
    # Compiler Options
    'gnu'        ) COMPILERS=$KEY ;;
    'clang'      ) COMPILERS=$KEY ;;
    'intel'      ) COMPILERS=$KEY ;;
    'pgi'        ) COMPILERS=$KEY ;;
    'cray'       ) COMPILERS=$KEY ;;
    'CXX'        ) CXX="$VALUE" ;;
    'CC'         ) CC="$VALUE" ;;
    'FC'         ) FC="$VALUE" ;;
    'CXXFLAGS'   ) CXXFLAGS="$VALUE" ;;
    'CFLAGS'     ) CFLAGS="$VALUE" ;;
    'FFLAGS'     ) FFLAGS="$VALUE" ;;
    'LDFLAGS'    ) LDFLAGS="$VALUE" ;;
    'DBGFLAGS'   ) DBGFLAGS="$VALUE" ;;
    # Build options
    '-mpi'           ) USE_MPI=1 ;;
    '-intelmpi'      ) USE_MPI=2 ;;
    '-openmp'        ) USE_OPENMP=1 ;;
    '-cuda'          ) USE_CUDA=1 ;;
    '-cray'          ) USE_CRAY=1 ;;
    '-mkl'           ) USE_BLAS=2 ;;
#    '-openblas'      ) USE_BLAS=3 ;;
#    '-macAccelerate' ) USE_BLAS=4 ;;
    '-libsci'        ) USE_BLAS=5 ;;
    '-debug'         ) USE_DEBUG=1 ;;
    '-d'             ) USE_OPT=0 ; USE_DEBUG=1 ;;
    '-noopt'         ) USE_OPT=0 ;;
    '-windows'       ) USE_WINDOWS=1 ;;
    # Cpptraj options
    '-nolfs'           ) LFS='' ;;
    '-single-ensemble' ) USE_SINGLEENSEMBLE=1 ;;
    '-debugon'         ) USE_CPPTRAJDEBUG=1 ;;
    '-timer'           ) USE_TIMER=1 ;;
    # Code profiling
    '-profile'  ) USE_PROFILE=1 ;;
    '-gprofile' ) USE_PROFILE=2 ;;
    '-vtune'    ) USE_PROFILE=3 ;;
    # Linking options
    '-static'        ) USE_STATIC=1 ;;
    '-libstatic'     ) USE_STATIC=2 ;;
    '-shared'        ) USE_SHARED=1 ;;
    '-amberlib'      ) USE_AMBERLIB=1 ;;
    '-fftw3'         )
      LIB_STAT[$LFFTW3]='enabled'
      USE_FFTW3=1 ;;
    '-nomathlib'     )
      LIB_STAT[$LBLAS]='off'
      LIB_STAT[$LLAPACK]='off'
      LIB_STAT[$LARPACK]='off'
      ;;
    '-openblas'      )
      LIB_FLAG[$LBLAS]='-lopenblas'
      LIB_STAT[$LLAPACK]='off'
      LIB_FLAG[$LLAPACK]=''
      ;;
    '-macAccelerate' )
      LIB_FLAG[$LBLAS]='-framework Accelerate'
      LIB_STAT[$LLAPACK]='off'
      LIB_FLAG[$LLAPACK]=''
      ;;
    # Install options
    '-noclean'       ) CLEAN=0 ;;
    '--skip-checks'  ) SKIP_CHECKS='yes' ;;
    '--prefix'       )
      CPPTRAJHOME=$VALUE
      CPPTRAJBIN=$VALUE/bin
      CPPTRAJLIB=$VALUE/lib
      ;;
    * ) # Check for library keys
      CheckLibraryKeys "$KEY" "$VALUE"
      if [ $? -eq 1 ] ; then
        Err "Unrecognized Option '$1'. Use '-h' or '--help' for help."
      fi
      ;;
  esac
  shift
done

# Basic checks
if [ $USE_MPI -ne 0 -a $USE_WINDOWS -eq 1 ] ; then
  Err "MPI not currently supported on Windows."
fi

# Set up compilers and compiler options
SetupCompilers

# Set up profiling if specified
SetupProfiling

# Basic Compiler checks
TestCompilers

# Set up external libraries
SetupLibraries

# Test external libraries
TestLibraries

# Summary
echo DIRECTIVES $DIRECTIVES
echo LDFLAGS $LDFLAGS
echo CPPTRAJ_LIB $CPPTRAJ_LIB
echo INCLUDE $INCLUDE
